---
title: "Taller sobre Git + GitHub + RStudio"
subtitle: "Área de Estadística y Procesamiento de Datos | FBioYF | UNR"
author: "Marcos Prunello"
format: 
  revealjs:
    theme: slides.scss
    transition: fade
    slide-number: true
footer: "[Volver al inicio](index.html)"
logo: imagenes/logo.png
---


# Principios de la investigación reproducible {background="#5B888C"}

## Investigación o trabajo reproducible

-   La investigación científica (y todo trabajo que pretenda ser serio) se basa en un principio fundamental: **garantizar la posibilidad de reproducir los resultados alcanzados**.

::: callout-important
En el análsis de datos se considera que una investigación o trabajo es **reproducible** cuando los resultados exactos pueden reproducirse si se tiene acceso a los datos, al software y al código usados.
:::

## Requisitos de la investigación reproducible

::: {.small}
En la práctica, algunas organizaciones (por ejemplo, agencias de financiamiento, editores de revistas) exigen particularmente:

-   Que los datos y el código se publiquen en algún repositorio.
-   Que sea posible crear las tablas y gráficos derivados de los datos ejecutando el código.
-   Que se enumeren los detalles sobre el sistema que se utiliza para ejecutar el análisis: sistema operativo, parches, semillas de números aleatorios, versiones específicas del software o paquetes.
-   Que el código esté escrito de una manera que se pueda entender fácilmente.
::: 

## Requisitos de la investigación reproducible

::: {.small}
-   Que los informes y documentos de salida también se generen utilizando código (es decir, se proporcione un archivo o archivos que, cuando se ejecutan, importan los datos, producen todos los resultados, insertan los resultados en el texto del informe y dan formato al informe).
::: 

![The Turing Way project illustration by Scriberia. Used under a CC-BY 4.0 licence. DOI: 10.5281/zenodo.3332807.](imagenes/repro1.jpg){fig-align="center" group="galeria" width="30%"}


## Beneficios de la investigación reproducible

-   Facilita la verificación de la investigación de forma independiente.
-   Facilita la extensión y continuación del trabajo.
-   Genera mayor eficiencia al producir código reutilizable (aunque al principio puede parecer que realizar análisis de manera reproducible y automatizada lleva más tiempo y es más difícil).
-   Incrementa las chances de que la investigación sea correcta.

## Beneficios de la investigación reproducible

![](imagenes/repro2.png){fig-align="center" group="galeria"}


## Algunos pilares de la investigación reproducible

1.  Automatización de tareas relacionadas a la comunicación y publicación de resultados.
2.  Cuidadosa importación de datos en el software.
3.  Organización del trabajo de análisis de datos en**proyectos*.
4.  **Implementación de un sistema de control de versiones**.

# Sistemas de control de versiones {background="#5B888C"}

## Sistemas de control de versiones

-   En cualquier proyecto de análisis de datos enseguida se generan muchísimos archivos, que van evolucionando en el tiempo, generando distintas versiones.


![](imagenes/humor.png){fig-align="center" group="galeria" width="50%"}

## Sistemas de control de versiones

::: {.small}
-   Como si fuera poco, estos contenidos generalmente deben ser **compartidos** o se producen trabajando colaborativamente con otras personas.
-   Sin una forma organizada de manejar todo esto, es fácil caer en un **caos de archivos, versiones, mails con adjuntos, etc.**, que le roban tiempo al trabajo principal y pueden reducir la calidad del producto final.
-   Contamos con algunos servicios de almacenamiento en la nube como **Google Drive** o **Onedrive** que ayudan a tener archivos sincronizados entre distintas computadoras. Sin embargo, las herramientas que ofrecen para la administración de versiones y el trabajo en equipo son limitadas.
-   Para esto existen específicamente los **sistemas de control de versiones**.
:::

## Sistemas de control de versiones

::: {.small}
-   En este taller veremos los pasos iniciales en el uso de un sistema de este tipo llamado **Git** y un servicio web de hosting llamado **GitHub**.
-   Debemos notar que para alguien que trabaja solo en proyectos de pequeña escala, tal vez no valga la pena pasar por este aprendizaje que puede ser un poco doloroso. 
- Pero incursionar en esto se vuelve necesario a medida que deseamos interactuar con la comunidad, participar en proyectos de mayor dimensión, tomar herramientas metodológicas producidas por otras personas, integrar proyectos comunitarios de enseñanza, publicar nuestro trabajo de investigación o nuestros desarrollos, sumar herramientas valoradas en el mercado laboral, etc.
:::

## Qué es control de versiones

-   Un sistema de control de versiones toma inicialmente una versión de un documento y luego registra los cambios que sufre el mismo a lo largo del tiempo.
-   Si más de una persona trabaja en el mismo documento, el sistema de control de versiones puede integrar las distintas versiones en una nueva.

![](imagenes/00_versiones.png){fig-align="center" group="galeria" width="50%"}

## Commits y repos

::: {.small}
-   Cada una de estas versiones recibe el nombre de **commit** y el sistema registra información útil (*metadata*) sobre las mismas.
-   El conjunto completo de todos los *commits*, su *metadata* y todos los archivos involucrados en el control de versiones de un proyecto, recibe el nombre de **repo** (*repositorio*, *repository*). 
- Podemos imaginarnos un repo sencillamente como una carpeta de la computadora que sabe cómo guardar todo eso.
-   El sistema provee herramientas para mantener sincronizados los *repos* en distintas computadoras o servicios de hosting, facilitando la colaboración entre personas.
:::

## Beneficios de emplear un sistema de control de versiones

::: {.small}
-   Hace que **pensemos en la organización y distribución** de nuestro trabajo.
-   La **colaboración entre personas sea hace de forma estructurada**.
-   Automáticamente disponemos de **presencia online** para nuestro proyecto.
-   Si estamos **desarrollando alguna pieza de software** (como un paquete de R o una librería de Python), lo podemos compartir por este medio.
-   Permite **publicar el código y los resultados que acompañan a nuestras publicaciones**.
-   **Guarda de forma organizada versiones viejas** de los archivos indefinidamente.
:::

## Qué es Git

![](imagenes/git.png){fig-align="center" group="galeria" width="25%"}

-   **Git** es un sistema de control de versiones.
-   [Hay muchos sistemas de este estilo](https://en.wikipedia.org/wiki/List_of_version-control_software), pero utilizaremos **Git** porque ha ganado gran popularidad en el mundo del análisis de datos.
-   **Git** es el software que instalamos localmente para registrar los cambios.
-   Se maneja con comandos desde una terminal.

## Qué es GitHub

![](imagenes/github.png){fig-align="center" group="galeria" width="25%"}

::: {.small}
-   [GitHub](https://github.com) es una interfaz gráfica online que complementa a **Git** y que provee un mecanismo de distribución para los repos.
-   Para llevarlo a terreno conocido, **GitHub** es a **Git** lo que **RStudio** es a **R** (más o menos).
-   Podemos usar **Git** sin **GitHub**, pero el último agrega muchas herramientas útiles.
-   **GitHub** es el servicio de hosting que utilizaremos para que nuestro proyecto tenga presencia online, permitiéndole a otras personas explorar los archivos, su historia, sincronizarse con la versión actual, proponer y realizar cambios, etc.
-   Hay otras plataformas que cumplen esta función, como GitLab or BitBucket, pero en este taller nos centramos en esta.
:::

## Git + GitHub + RStudio

-   **Git + GitHub** es, por ejemplo, el entorno más popular para los desarrolladores de paquetes de R. 
-   En este taller no vamos a hacer mucha distinción entre qué cosa es de **Git** y cuál otra es de **GitHub**.
-   Es más, vamos a usar estas herramientas desde RStudio, sin hacer uso en ningún momento de la terminal. 

**¡Ya estamos listos para empezar!**